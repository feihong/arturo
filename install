######################################################
# Arturo
# Programming Language + Bytecode VM compiler
# (c) 2019-2021 Yanis Zafirópulos
#
# @file: build
######################################################

################################################
# HELPERS
################################################

RED='\e[0;31m'
GREEN='\e[1;32m'
BLUE='\e[0;34m'
MAGENTA='\e[1;35m'
CYAN='\e[1;36m'
GRAY='\e[0;90m'
CLEAR='\e[0m'

printColorized() {
    NC='\e[0m'
    printf "${1}${2}${NC}"
}

print() {
    printf "${1}"
}

eecho() {
    printf "$1\n"
}

showHeader() {
    eecho "======================================"
    eecho "${GREEN}"
    eecho "               _                    "
    eecho "              | |                   "
    eecho "     __ _ _ __| |_ _   _ _ __ ___   "
    eecho "    / _\` | '__| __| | | | '__/ _ \ "
    eecho "   | (_| | |  | |_| |_| | | | (_) | "
    eecho "    \__,_|_|   \__|\__,_|_|  \___/  "
    eecho "                                    "
    eecho "${CLEAR}"
    printf "     \e[1mArturo"
    printf " Programming Language\e[0m\n"
    eecho "      (c)2021 Yanis Zafirópulos"
    eecho ""

    eecho "======================================"
    eecho " ► Installer"
    eecho "======================================"
    printf "${CLEAR}"
}

showFooter(){
    eecho ""
    printf "${GRAY}"
    eecho " :---------------------------------------------------------"
    eecho " : Arturo has been successfully installed!"
    eecho " :"
    eecho " : To be able to run it,"
    eecho " : first make sure its in your \$PATH:"
    eecho " :"
    eecho " :    export PATH=$HOME/.arturo/bin:\$PATH"
    eecho " :"
    eecho " : and add it to your ${shellRcFile},"
    eecho " : so that it's set automatically every time."
    eecho " :"
    eecho " : Rock on! :)"
    eecho " :---------------------------------------------------------"
    printf "${CLEAR}"
    eecho ""
}

section(){
    eecho ""
    printf " ${MAGENTA}●${CLEAR} ${1}"
    eecho ""
}

info(){
    eecho "   ${GRAY}${1}${CLEAR}"
}

command_exists(){
    type "$1" &> /dev/null
}

animate_progress(){
    pid=$! # Process Id of the previous running command

    spin='-\|/'

    i=0
    printf "${CYAN}"
    while kill -0 $pid 2>/dev/null
    do
        i=$(( (i+1) %4 ))
        printf "\r ${spin:$i:1}"
        sleep .1
    done
    printf "\b\b\b\b     \x1B[A\x1B[A"
    printf "${CLEAR}"
}

################################################
# FUNCTIONS
################################################

verifyOS(){
    case "$OSTYPE" in
        linux*)   currentOS="linux" ;;
        darwin*)  currentOS="macos" ;; 
        cygwin*)  currentOS="windows" ;;
        msys*)    currentOS="windows" ;;
        solaris*) currentOS="solaris" ;;
        freebsd*) currentOS="freebsd" ;;
        bsd*)     currentOS="bsd" ;;
        *)        currentOS="unknown" ;;
    esac

    info "os: $currentOS"
}

verifyShell(){
    case "$SHELL" in
        "/bin/zsh")     
            currentShell="zsh" ;
            shellRcFile="~/.zshrc" ;;
        "/bin/bash")    
            currentShell="bash" ;
            shellRcFile="~/.bashrc or ~/.profile" ;;
        "/bin/sh")      
            currentSheel="sh" ;
            shellRcFile="~/.profile" ;;
        *)              
            currentShell="unrecognized" ;
            shellRcFile="~/.profile" ;;
    esac

    info "shell: $currentShell"
}

verifyNim(){
    if ! command_exists nim ; 
    then
        curl https://nim-lang.org/choosenim/init.sh -sSf | sh
    fi
    VERS=$(nim -v | grep -o "Version \d\.\d\.\d")
    NIMV="${VERS/Version /}"
    info "nim: $NIMV"
}

verifyDirectories() {
    # create target dirs recursively, if not exists
    mkdir -p "$TARGET_DIR"
    mkdir -p "$TARGET_LIB"

    info "in: $ROOT_DIR"

    if [[ ":$PATH:" == *":$TARGET_DIR:"* ]]; 
        :
    then
        # path was not in path
        PATH=$TARGET_DIR:$PATH      
    fi
}

buildArturo(){
    info "version: $(cat version/version) b/$(cat version/build)"
    info "config: $CONFIG"

    eecho "${GRAY}"
    if [ ! $PRINT_LOG ] && [ ! $IS_DEV_BUILD ];
    then
        nim c $FLAGS -o:$BINARY $MAIN 2>/dev/null &
        animate_progress
    else
        nim c $FLAGS -o:$BINARY $MAIN
    fi
    eecho "${CLEAR}"
}

compressBinary(){
    if ! command_exists upx ; 
    then
        info "compressing binary"
        upx -q $BINARY >/dev/null 2>&1
    fi
}

installAll(){
    cp $BINARY $TARGET_DIR
}

################################################
# INITIALIZE OPTIONS
################################################

# paths and tools

ROOT_DIR="$HOME/.arturo"
TARGET_DIR="$ROOT_DIR/bin"
TARGET_LIB="$ROOT_DIR/lib"

BINARY="bin/arturo"
MAIN="src/arturo.nim"

# variables

MINI_BUILD=false
COMPRESS=true
PRINT_LOG=false

if [ "$(whoami)" = "drkameleon" ]; then IS_DEV_BUILD=true
else IS_DEV_BUILD=false
fi

CONFIG=""

FLAGS="\
 --warning[UnusedImport]:off\
 --colors:off\
 -d:release\
 -d:danger\
 --panics:off\
 --gc:orc\
 --checks:off\
 --overflowChecks:on\
 -d:ssl\
 --threads:on\
 --passC:"-O3"\
 --cincludes:extras\
 --nimcache:.cache\
 --embedsrc:on\
 --path:src"

# check switches

while test $# -gt 0
do
    case "$1" in
        log)
            PRINT_LOG=true;;
        dev)
            IS_DEV_BUILD=true;;
        mini)      
            MINI_BUILD=true 
            FLAGS="$FLAGS -d:MINI";;
        verbose) 	
            CONFIG="verbose $CONFIG"
            FLAGS="$FLAGS -d:VERBOSE";;
        benchmark) 	
            CONFIG="benchmark $CONFIG"
            FLAGS="$FLAGS -d:BENCHMARK";;
        debug) 		
            COMPRESS=false
            CONFIG="debug $CONFIG"
            FLAGS="$FLAGS -d:DEBUG --debugger:on --debuginfo --linedir:on";;
        profile) 	
            CONFIG="profile $CONFIG"
            FLAGS="$FLAGS -d:PROFILE --profiler:on --stackTrace:on";;
        *) ;;
    esac
    shift
done

if $MINI_BUILD; then 
    CONFIG="@mini $CONFIG"
    FLAGS="$FLAGS --opt:size"
else 
    CONFIG="@full $CONFIG"
    FLAGS="$FLAGS --opt:speed" 
fi

if $IS_DEV_BUILD; then
    FLAGS="$FLAGS --hint[Performance]:off"
else
    if ! $PRINT_LOG; then
        FLAGS="$FLAGS --hints:off"
    fi
fi

if $IS_DEV_BUILD; then
    awk '{sub(/[[:digit:]]+$/,$NF+1)}1' version/build > version/build_tmp && mv version/build_tmp version/build
    git commit -m 'build update' version/build
fi

################################################
# MAIN
################################################

showHeader

section "Checking environment..."
verifyOS
verifyShell
verifyNim

section "Building..."
buildArturo

if [ $? -eq 0 ];
then
    section "Post-processing..."
    compressBinary

    section "Installing..."
    verifyDirectories
    installAll

    section "Done!"
    showFooter

    exit 0
else
    eecho "The installer failed :(" >&2
    exit 1
fi